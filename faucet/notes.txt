0x6080604052348015600f57600080fd5b50604580601d6000396000f3fe - bytecode that will be executed in the EVM

60 80 60 40 52 34 80 15 60 0f 57 60 00 80 fd 5b 50 60 45 80 60 1d 60 00 39 60 00 f3 fe
0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
                                              |

0x60 - PUSH1 0 1 Place 1 byte item on stack.
80 - value to push
0x60 - PUSH1 0 1 Place 1 byte item on stack.
40 - value to push
0x52 - MSTORE 2 0 Save word to memory.

0x34 - CALLVALUE 0 1 Get deposited value by the instruction/transaction responsible for this execution.
get ETH value sending in transaction
0x80 - DUP1 1 2 Duplicate 1st stack item.
0x15 - ISZERO 1 1 Simple not operator.
if first item in stack is zero it push 1 on top of it
0x60 - PUSH1 0 1 Place 1 byte item on stack.
0f - value to push
0x57 - JUMPI 2 0 Conditionally alter the program counter.
if stack[1] == 1 then jump stack[0] (0x0f = 15)
and remove 2 items from the stack
0x5b - JUMPDEST 0 0 Mark a valid destination for jumps.
0x50 - POP 1 0 Remove item from stack.
0x60 - PUSH1 0 1 Place 1 byte item on stack.
45 - value to push
0x80 - DUP1 1 2 Duplicate 1st stack item.
0x60 - PUSH1 0 1 Place 1 byte item on stack.
1d - value to push
0x60 - PUSH1 0 1 Place 1 byte item on stack.
00 - value to push
0x39 - CODECOPY 3 0 Copy code running in current environment to memory.
stack[0] = 0x00 = 0 - memory offset to write
stack[1] = 0x1d = 29 - bytecode offset to read from
stack[2] = 0x45 = 69 - length of bytecode to copy
0x60 - PUSH1 0 1 Place 1 byte item on stack.
00 - value to push
0xf3 - RETURN 2 0 Halt execution returning output data
0xfe - INVALID ∅ ∅ Designated invalid instruction. - also mark the end of the initialization code

// stack


0x00
0x1d
0x45
POP above after CODECOPY
new stack:
0x00 - offset fo the memory to returning data from (for 0xf3 - RETURN)
0x45 - data length (in bytes) in memory to return (for 0xf3 - RETURN)

// memory

Memory[0x40] = 0x80 // free memory pointer

Memory[0x00] = code to copy

---------------------------------------------------------------------
// how is Block Header Calculated
RLP (“recursive length prefix”) encoding is the main serialization format used in Ethereum,
and is used everywhere - for blocks, transactions, account state data and
wire protocol messages.

How header is encoded
https://ethereum.stackexchange.com/questions/67280/block-header-hash-calculation

Encoder
https://toolkit.abdk.consulting/ethereum#rlp

About RLP encoding
https://medium.com/coinmonks/data-structure-in-ethereum-episode-1-recursive-length-prefix-rlp-encoding-decoding-d1016832f919

Etherem Live view
http://ethviewer.live/
https://txstreet.com/v/eth-btc

bits, bytes, words
https://www.youtube.com/watch?v=Weyv-V8xz0c

EVMs, and Bytecode
https://www.youtube.com/watch?v=RxL_1AfV7N4

Memory in computer:
https://www.youtube.com/watch?v=F0Ri2TpRBBg

--------------------------------------------------------------------------------
const inst = await Faucet.deployed()
2 ETH = 2000000000000000000 WEI
inst.addFunds({value: '2000000000000000000'})
--------------------------------------------------------------------------------
web3.eth.sendTransaction({from:accounts[0], to: '0x5c434646d82797AEF00762EE7C2dA1F4F1347DA8', data: '0xa26759cb', value: '3000000000000000000'})
https://eth-converter.com/
https://emn178.github.io/online-tools/keccak_256.html

addFunds() = 0xa26759cb - first 4 bytes in Keccak-256

https://remix.ethereum.org/

https://eth.wiki/json-rpc/API
{"jsonrpc":"2.0","method":"eth_accounts","params":[],"id":1}

POST http://127.0.0.1:7545
{
	"jsonrpc":"2.0",
	"method":"eth_sendTransaction",
	"params":[
		{
			"from": "0x1ED2e0a35814e045701A0D613B3e610f9146d344",
			"to": "0x47c4fA99E1abfA46A107589717Bf2C86ED8ecfC7",
			"gas": "0x76c0", // 30400
			"gasPrice": "0x9184e72a000", // 10000000000000
			"value": "0x8AC7230489E80000", // 10 ETH
			"data": "0xa26759cb" // addFunds()
		}
	],
	"id":2
}
Response
{
    "id": 2,
    "jsonrpc": "2.0",
    "result": "0xef96e5616a660b9a2fb2e53d4c958fd52a3f91aaf92a5ef88c5e7a002eeab0e9"
}